<!-- <script src="data:application/octet-stream;base64,"></script> -->
<link href="../js/select2/select2.css" rel="stylesheet"/>
<link rel="stylesheet" href="../js/ea/themes/bootstrap/easyui.css">
<style>
    .combo{ 
        width: 545px !important; 
        height: 35px !important;
        border-radius: 5px !important;
    }
    .searchbox{ 
        width: 600px !important; 
        height: 35px !important;
        border-radius: 5px !important;
    }
    .searchbox-text{
        height: 20px !important;
        padding: 0px !important;
        padding-top: 4px !important;
        padding-left: 10px !important;
    }
    .combo-text{
        height: 20px !important;
        padding: 0px !important;
        padding-top: 4px !important;
        padding-left: 4px !important;
    }
    .combo-arrow{
        margin-top: -20px;
    }
</style>
<script>
// $(document).on("ready xcrudafterrequest",function(){
//     $("select").select2();
// })
$(document).ready(function(){
	$('#precio_pb, #cantidad_pb').keyup(function() {
		subtotal_pb();
	});
	function subtotal_pb(){
	$('#subtotal_pb').val(($('#precio_pb').val()*$('#cantidad_pb').val()).toFixed(2));
	}
	$('#depto, #fecha, #total').mousedown(function(){ return false; }).keydown(function(event){ return false; });
	$('#depto, #fecha, #total').css({ 'cursor':'not-allowed' });
	jQuery('#name,#rif,#rnc_code,#status,#address,#tlf,#email,#create_date,#due_date').mousedown(function(){ return false; }).keydown(function(event){ return false; });
	jQuery('#name,#rif,#rnc_code,#status,#address,#tlf,#email,#create_date,#due_date').css({ 'cursor':'not-allowed' });
 jQuery('#id_pb').combogrid({
    panelWidth:545,
    idField:'id_req_detail',
    textField:'name_product',
	url: '../procesos/traeprueba',
 	mode:'remote',
    columns:[[
 {field:'id_requisition',title:'N°req',width:45},
{field:'name_unit',title:'Unidad',width:160},
{field:'name_product',title:'Detalle',width:160},
{field:'quantity',title:'Cantidad',width:160}
    ]],
  onSelect:function(){
		 var g = jQuery('#id_pb').combogrid('grid');	// get datagrid object
		 var r = g.datagrid('getSelected');	// get the selected row
		$('#id_pb').val(r.id_req_detail);
		$('#cantidad_pb').val(r.quantity);
		subtotal_pb();
	}
    });
 // if(jQuery('#rif')){
 // 	//alert('hola');
 // 	var ap='<table class="table table-striped"><tbody><tr><td style="width: 26% !important;"class="details-label">INTRODUZCA RIF</td><td><input type="text" class="xcrud-input form-control" data-type="text" id="searchRif"></td></tr></tbody></table>';
 // 	jQuery('.xcrud-view').append(ap);
 // 	jQuery('#name,#rif,#rnc_code,#status,#address,#tlf,#email,#create_date,#due_date').mousedown(function(){ return false; }).keydown(function(event){ return false; });
	// jQuery('#name,#rif,#rnc_code,#status,#address,#tlf,#email,#create_date,#due_date').css({ 'cursor':'not-allowed' });

 // }
jQuery('#rif').searchbox({
searcher:function(value){
				if(value==0){
					alert("Debe introducir primero un RIF");
				}else{
						//jQuery(':input').val('');
						var rif =value.toUpperCase();
						rif = rif.replace(/^\s+/,'').replace(/\s+$/,'');
						//alert(rif);
					    jQuery.ajax({url:'../usuarios/sncVerificar',type:'POST',data:{ id: value },success:function(respuesta){
                            var pos=respuesta.indexOf('}');
                            respuesta=respuesta.substr(0,pos+1);
                            var res = jQuery.parseJSON(respuesta);
                            if(res.existe=='S'){
                            	var pos=res.estadoEmpre.indexOf('NO REGISTRADA');
                            	var pos2=res.estadoEmpre.indexOf('SUSPENDIDA');
                            	if(pos!=-1){
                            		alert(res.estadoEmpre);
                            	}
                            	else if(pos2!=-1){
                            		alert(res.estadoEmpre);
                            	}
                            	else{

                            	jQuery('#name').val(res.nomfis);
                            	jQuery('#rif').val(res.rif);
                            	$('#rif').val(res.rif);
                            	jQuery('#rnc_code').val(res.rnc);
                            	jQuery('#status').val(res.estadoEmpre);
                            	jQuery('#address').val(res.direc1);
                            	jQuery('#tlf').val(res.telefono);
                            	jQuery('#email').val(res.email);
                            	jQuery('#create_date').val(res.creacionrnc.toLocaleString());
                            	jQuery('#due_date').val(res.vencernc.toLocaleString());
                            	}
                            }
                            else{
                            	alert('Empresa No Registrada');
                            }
                         }});

				}
},
});
 jQuery('#id_cuenta').combogrid({
    panelWidth:700,
    idField:'id_account',
    textField:'code_account',
	url: '../procesos/account_fund',
 	mode:'remote',
    columns:[[
 {field:'code_account',title:'N° Cuenta',width:100},
{field:'name_account',title:'Nombre de Cuenta',width:300},
{field:'id_fund',title:'Fondo',width:160},
{field:'name_dept',title:'Unidad Ejecutora',width:160}
    ]],
onSelect:function(){
		 var g = jQuery('#id_cuenta').combogrid('grid');	// get datagrid object
		 var r = g.datagrid('getSelected');	// get the selected row
		$('#id_cuenta').val(r.id_account);
	}
    });
});
</script>
<?php echo $this->render_table_name($mode); ?>
<div class="xcrud-top-actions btn-group">
    <?php echo $this->render_button('save_new','save','create','btn btn-primary','','create,edit') ?>
    <?php echo $this->render_button('save_edit','save','edit','btn btn-default','','create,edit') ?>
    <?php echo $this->render_button('save_return','save','list','btn btn-success','','create,edit') ?>
    <?php echo $this->render_button('return','list','','btn btn-warning') ?>
</div>
<div id="respuesta">
</div>
<div class="xcrud-view">
<?php echo $this->render_fields_list($mode); ?>
</div>
<div class="xcrud-nav">
    <?php echo $this->render_benchmark(); ?>
</div>
